import Head from "next/head";
import style from "@/styles/index.module.scss";
import Navbar from "@/components/Navbar";
import Pronounciation from "@/components/Pronounciation";
import Verb from "@/components/Verb";
import {  useContext, useEffect, useRef, useState } from "react";
import dicCtx, { DicCtxType } from "@/context/dictionaryCtx";



export default function Home() {
  let inputRef = useRef<HTMLInputElement>(null);
  const [inputWord, setInputWord] = useState<string | undefined>(" ");
  const [meanings, setMeanings] = useState<
    | {
        definitions: {
          definition: string;
          synonyms: string[];
          antonyms: string[];
        }[];
        partOfSpeech: string;
        synonyms: string[];
      }[]
    | null
  >();
  const [phonetic, setPhonetic] = useState<string | null>(null);
  const [audio, setAudio] = useState<string | undefined>();
  let { theme } = useContext(dicCtx) as DicCtxType;


  useEffect(() => {
    let ignore = false;
    async function fetchData() {
      let url = `https://api.dictionaryapi.dev/api/v2/entries/en/${inputWord}`;
      let rawResponse = await fetch(url);
      let response = await rawResponse.json();
      console.log(response)
      let { meanings=[], phonetic="", phonetics=[] } = response[0] || {};
      let audio = phonetics.length > 2 && phonetics[2]["audio"] ;

      meanings = meanings ? meanings.map((obj: any) => {
        return {
          synonyms: obj.synonyms,
          partOfSpeech: obj.partOfSpeech,
          definitions: obj.definitions,
        };
      }): [];
      if (!ignore) {
        setPhonetic(phonetic);
        setMeanings(meanings);
        setAudio(audio);
      }
    }
    fetchData();
    return () => {
      ignore = true;
    };
  }, [inputWord]);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${style.main}  ${theme ? style.light : style.dark}`}>
        <div className={style.container}>
          <Navbar />
          <div className={style.search}>
            <input type="search" ref={inputRef} />
            <button
              onClick={(e) => {
                setInputWord(inputRef.current?.value);
              }}
            ></button>
          </div>
          <Pronounciation input={inputWord} phonetic={phonetic} audio={audio} />
          <Verb meanings={meanings} />
        </div>
      </main>
    </>
  );
}

